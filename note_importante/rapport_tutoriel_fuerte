ABAK-KALI Nizar 11290569
02/06/2014

derniere mis a jour : 03/06/2014 18:07

tutoriel sur fuerte 

ROS TUTORIAL 
file systeme :
     package : plus petit niveau d'organisation de ROS . sa peut contenir tout 
     Manifest : Description du package ainsi que de ces dependances avec d'autres package .
     
     stacks : collection de package .plus haut niveau de d'organisation .
     stacks Manifest : manifest pour stacks 

file system tools 
     rospack : donnes des infos sur les packages
     rosstack : donnes des infos sur les stacs 
Usage:

$ rospack find [package_name]
$ rosstack find [stack_name]
 
	roscd:changer de package ou stack
Usage:

$ roscd [locationname[/subdir]]

  	rosls : faire un ls d'un package ou bien d'une stack


----------------------------------------------

CREATION DU PREMIER PACKAGE 
http://wiki.ros.org/ROS/Tutorials/CreatingPackage
on utilise la commande: roscreate-pkg [nom du package] [dependance1]...

pour le premier package on se met dans la sandbox present dans le le workspace
puis on creer le package suivant (tuto)

$ roscreate-pkg beginner_tutorials std_msgs rospy roscpp
puis faire un source (tres important)

source ~/fuerte_workspace/setup.bash

puis pour test 
rospack find beginner_tutorials
IT WORKS !!!

------------------------------------------------------   
verification des dependances AU PREMIER DEGRE: rospack depends1 [nom du package]
verification des dependances INDIRECT: rospack depends [nom du package]
------------------------------------

Deux librairie pour utiliser les langages C++ et python : roscpp , rospy

-------------------------------------------
BUILD du premier package 
http://wiki.ros.org/ROS/Tutorials/BuildingPackages

on utilise rosmake pour compiler un package 

rosmake [nom du package]

il est possible compiler plusieur package .

----------------------------------------------
Comprehension de ROS NODE , ROS CORE , ROS RUN 

pour ce tuto j'install un petit simulateur leger fournie par ros 

commande: sudo apt-get install ros-fuerte-ros-tutorials
//pas besoin si on a fait une install full

Les concepts de graph dans ros

Nodes: un node est un executable qui utilise ROS pour communiquer avec d'autres noeuds.

Messages: ROS type de donné utilisé quand on s'inscrit ou on publie sur un sujet.

Topics:un node peut publier un message a un topic . Il peut aussi s'inscrire au topic pour recevoir des messages.

Master:  Service de nom pour ROS (i.e aide les noeuds à s'aider les uns les autres)

rosout: ROS equivalent of stdout/stderr

roscore: Master + rosout + parameter server (parameter server will be introduced later)  

Les librairie Client :
les librairie client permettent a des noeud ecrit dans different langages de communiqué.


IMPORTANT : LA PREMIERE COMMANDE A UTILISER LORSQUE L'ON VEUT UTILISER EST roscore
 
apres cela on ouvre un nouveau term et on lance:$ rosnode list
on obtient tout les noeud en execution 
dans notre cas "rosout"

autre commande interresante rosnode 

info [nom du noeud] donne les info du noeud
ex : $ rosnode info rosout

ping [nom du noeud] envoie un message au noeud de la meme maniere que ping
ex : $ rosnode ping myturtle 


rosrun : permet de lancer un noeud dans un paquet donné 
$rosrun [package name] [node name]
chose pratique on peut changer le nom du noeud lors de son envoie 

$rosrun [package name] [node name] __name:=nouveau_nom

--------------------------------------------------------
Comprehension des topics :
http://wiki.ros.org/ROS/Tutorials/UnderstandingTopics

Deux noeud communique ensemble au travers d'un topic . 
ex : un noeud de teleoperation ecrit sur le topic les touche appuyé tandis qu'un autre noeud s'inscrit sur le topic pour lire les touche et agir .

le noeud rqt_graph : sert a dessiner des graphes sur les communications des noeuds .

INTRO A ROSTOPIC :
rostopic : permet d'avoir des infos sur les topic ROS 

usage :$ rostopic -h
rostopic bw     display bandwidth used by topic
rostopic echo   print messages to screen
rostopic hz     display publishing rate of topic    
rostopic list   print information about active topics
rostopic pub    publish data to topic
rostopic type   print topic type

rostopic echo [topic]:
	 permet d'afficher un topic et tout ce qui est publier par un noeud sur un topic 

lorsque l'on raffraichie rqt_graph on voit aussi que rostopic echo est incrit au topic 

rostopic list : lister tout les topics incrit ainsi que publié 

ostopic list -h

    Usage: rostopic list [/topic]

    Options:
      -h, --help            show this help message and exit
      -b BAGFILE, --bag=BAGFILE
                            list topics in .bag file
      -v, --verbose         list full details about each topic
      -p                    list only publishers
      -s                    list only subscribers

ROS MESSAGE

rostopic type permet d'afficher le type de retour d'un message de n'importe lequel des topic publié

rostopic msg permet d'afficher un message 

msg show [msg type]

pour publier des messages sur un topic  avec leurs arguments 

rostopic pub [topic] [msg_type] [args]

pour groovy un exemple :
$ rostopic pub -1 /turtle1/command_velocity turtlesim/Velocity  -- 2.0  1.8

rostopic pub : commande pour publier un message a un topic donné

-1 : un seul message puis stop 
ou 
-r [nombre] : pour une repetition et sa frequence en hertz

/turtle1/command_velocity : nom du topic auquelle on publie 

turtlesim/Velocity : Le type de message a envoyé on peut voir ce qu'il contient avec rosmsg show

-- : indique que ce qui suit n'est pas des option mais des arguments

la commande $rostopic hz [topic] permet de savoir a quelle  frequence on publie sur ce topic 

rqt_plot permet de voir en temp reel sur graphe les argument que l'on trouve dans un topic

------------------------------------------------------------------------
Comprehension des service ROS ainsi des parametres



services : les services sont une autre maniere pour les noeuds de communiquer cela permet d'envoyer une rquete et de recevoir une reponse .

Utilisation de rosservice :
rosservice list         print information about active services
rosservice call         call the service with the provided args
rosservice type         print service type
rosservice find         find services by service type
rosservice uri          print service ROSRPC uri

pour voir les parametre d'un service 
rosservice type [nom du service] |rossrv show

pour appeler un service avec des paramtre bien definie

rosservice call [nom du service] {list parametres}


Utilisation rosparam 
rosparam nous permet de sauver et manipuler des donnés dans le serveur de paramètre ROS  . La synthaxe des donné est la meme que celle sur python 

usage :
 rosparam set            set parameter
 rosparam get            get parameter
 rosparam load           load parameters from file
 rosparam dump           dump parameters to file
 rosparam delete         delete parameter
 rosparam list           list parameter names

nb : on peut changer les variable presnte sur le serveur penser a faireun rosservice pour raffraichir avec les nouvelles vals.

pour obtenir toutes les params

rosparam get /

on peut ecrire toutes les donnes dans un fichier .yaml
$ rosparam dump params.yaml
toutes les donneés sont ecrite dans un fichier nommé params.yaml

et les loader , voir meme changer le nom puis obtenir les donner du nouveau noom

-------------------------------------------------------------------------------

UTILISATION DE rqt_console et roslaunch

rqt_console /rqt_logger_lvl : debuggage
roslaunch : lancer plusieur noeud en mm temps

la console permet d'afficher tout le message d'un topic selon les levels de pririté mis par le logger level 
level du - au + prioritaire 
| debug
 | Info
  | Warn
   | Error
    vFatal 

utilisation de roslaunch 

$ roslaunch [package] [filename.launch]

pour tester on roslaunch je suis allé dans le package beginner_tutorials
grace a roscd 
puis j'ai creer un dossier launch 
dans ce dossier je creer un .launch .
explication du .launch :
<launch> : le launch tag pour spécifié que c"est un executable 

{
<group ns="turtlesim1">
    <node pkg="turtlesim" name="sim" type="turtlesim_node"/>
  </group>

  <group ns="turtlesim2">
    <node pkg="turtlesim" name="sim" type="turtlesim_node"/>
  </group>
}:on creer deux groupes avec un tag nom  turtlesim1 et turtlesim2
on evite ainsi les conflit deux nom lorsqu'on lance deux simulateur en mem temps 

{
 <node pkg="turtlesim" name="mimic" type="mimic">
    <remap from="input" to="turtlesim1/turtle1"/>
    <remap from="output" to="turtlesim2/turtle1"/>
  </node>
}: ici on creer un noeud qui avoir l'effet de mimétisme . Ainsi la tortue2 vas mimé la tortue 1 .

</launch>: on ferme le tag de lancement 

maintenant on launch le tout avec cette commande 

$ roslaunch beginner_tutorials turtlemimic.launch

la commande pour tourner le premier le deuxieme copiera .

$ rostopic pub /turtlesim1/turtle1/command_velocity turtlesim/Velocity -r 1 -- 2.0  -1.8

--------------------------------------------------------------------
UTILISATION DE rosed pour editer des fichier dans ROS

http://wiki.ros.org/ROS/Tutorials/CreatingMsgAndSrv

rosed : nous permet d'editer directement des fichier dans un package donné 

usage :
$ rosed [package_name] [filename]

choisir son editeur par defaut :
on ecrit dans le bashrc 

export EDITOR='emacs '

------------------------------------------------------------------
Creation de msg et srv ROS

Intro a msg et srv
 
	creation de msg
msg: ce sont de simple fichier text qui decrivent les champs d'un message ROS.il sont utilisé pour généré du source code pour des messages dans diff langages 
->DANS LE DOSSIER msg DE CHAQUE PACKAGE 

srv: fichier qui decrit un service . DEUX PARTIE  requete | reponse  
->DANS LE DOSSIER srv DE CHAQUE PACKAGE


 roscd beginner_tutorials
 mkdir msg
 echo "int64 num" > msg/Num.msg
 rosed CMakeList.txt // la on decommente "# rosbuild_genmsg()"
 
	utilisation de rosmsg
verifier si ROS peut voir notre message 
 
$rosmsg show [type de message]

dans notre cas 
rosmsg show beginner_tutorials/Num
 
Le type de message est découpé en deux partie le package / le nom du message 

   	creation de srv 
de la meme maniere que avec msg on creer un dossier srv dans notre package
La difference est que lieu de creer le srv nous meme j'ai copié un existant a laide de roscp 

roscp [package_name] [file_to_copy_path] [copy_path]
$ roscp rospy_tutorials AddTwoInts.srv srv/AddTwoInts.srv

  	utilisation rossrv

$ rossrv show <service type>

APRES AVOIR CREER DE NOUVEAU MESSAGE ON MAKE YOUPIIIIIIIIIIIII
$ rosmsg -h

------------------------------------------------------------------
04/06/2014
ECRIRE UN PUBLISHER ET UN SUBSCRIBER (py/C++)

python
 http://wiki.ros.org/ROS/Tutorials/WritingPublisherSubscriber%28python%29
C++
http://wiki.ros.org/ROS/Tutorials/WritingPublisherSubscriber%28c%2B%2B%29

allez on commence en C++ ^^

